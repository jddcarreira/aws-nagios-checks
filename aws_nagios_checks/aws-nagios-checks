#!/usr/bin/env python
"""
AWS Nagios Check
Nagios checks based on AWS Cloudwatch metrics

Usage:
  aws-nagios-check.py [--aws-profile=<profile>] [--aws-region=<region>] --metric=<metric> --resource=<resource> --warn=<warn> --crit=<critical>

  --aws-profile=<profile>                           AWS Profile
  --metric=<metric>                                 Metric to be feteched
  --resource=<resource>                             Resource get the data
  --warn=<warn>                                     Warning threeshold
  --crit=<critical>                                 Critical threeshold

Options:
  -h --help                                         Show this screen.

Metrics Prefix:
    - AELB_                                         ApplicationELB Metrics
    - RDSCluster_[Reader|Writer]                    RDS Cluster Metrics

Metric Example:
    [Metric Prefix]_[CW Metric Name]
    RDSCluster_ReaderCPUUtilization

"""

import sys
import boto3

from aws_nagios_checks.libs.nagios_validations import NagiosValidations
from aws_nagios_checks.libs.rds import RDS
from aws_nagios_checks.libs.aelb import AELB
from docopt import docopt

def cloudwatch_connection(profile, region):
    if profile:
        session = boto3.Session(profile_name=profile)
    con = session.client('cloudwatch', region_name=region)
    return con

def main(aws_profile, aws_region, metric, resource, wrn, crt):
    if metric[:11] == "RDSCluster_":
        metric_name = metric[17:]
        metric_role = "WRITER" if metric[11:][:6] == "Writer" else "READER"

        try:
            cw_con = cloudwatch_connection(aws_profile, aws_region)
            metric_val = RDS(cw_con).get_rds_cluster_metric(cluster=resource, role=metric_role, metric=metric_name)
            if metric_val:
                check_code = NagiosValidations.high_is_bad(val=metric_val['Average'], wrn=wrn, crt=crt)
                print "%s: %s" %(metric, metric_val['Average'])
                sys.exit(check_code)
        except Exception, e:
            print e


    elif metric[:5] == "AELB_":
        metric_name = metric[5:]
        try:
            cw_con = cloudwatch_connection(aws_profile, aws_region)
            metric_val = AELB(cw_con).get_app_elb_metric(loadbalancer=resource, metric=metric_name)
            if metric_val:
                check_code = NagiosValidations.high_is_bad(val=metric_val['Average'], wrn=wrn, crt=crt)
                print "%s: %s" %(metric, metric_val['Average'])
                sys.exit(check_code)
        except Exception, e:
            print e

    sys.exit(4)

if __name__ == "__main__":
    args = docopt(__doc__)

    aws_profile = args['--aws-profile']
    aws_region = args['--aws-region']
    metric = args['--metric']
    resource = args['--resource']
    warn = float(args['--warn'])
    critical = float(args['--crit'])

    main(aws_profile, aws_region, metric, resource, warn, critical)
